# 1. Pick directory (normally a folder with your aligned bam files)
NGS.dir <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/ribosomeProfiling/AdditionalDatasets/BAMs/"
# 2. .gff/.gtf location
gtf_path <- "Outputs/EvolutionNanopore/Annotation/FunannotateDef/Scer/Scer_rescued.agat.gtf"
#txdb <- loadTxdb(gtf_path)
# 3. fasta genome location
genome_path <- "Inputs/Genomes/Scer_genome.fna"
#genome <- readDNAStringSet(genome_path)
#names(genome) <- gsub(pattern = " .*", replacement = "",x = names(genome))
# 4. Pick an experiment name
exper.name <- "ORFik_yeast"
# Template
template <- create.experiment(dir = NGS.dir,  # directory of the NGS files for the experiment
exper.name,     # Experiment name
txdb = gtf_path,    # gtf / gff / gff.db annotation
fa = genome_path,     # Fasta genome
organism = "Saccharomyces cerevisiae", # Scientific naming
saveDir = NULL, # Create template instead of ready experiment
)
library(BiocManager)
library(dplyr)
library(ggplot2)
library(rtracklayer)
library(GenomicFeatures)              # For basic transcript operations
library(ORFik)
library(data.table)
library(BSgenome)
library(ribosomeProfilingQC)
library(Rsamtools)
library(seqLogo)
source("Inputs/Scripts/Modified_Orfik.R")
source("/home/jmontanes/Documents/EvolutionNanopore/Inputs/Scripts/Modified_Orfik.R")
# 1. Pick directory (normally a folder with your aligned bam files)
NGS.dir <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/ribosomeProfiling/AdditionalDatasets/BAMs/"
# 2. .gff/.gtf location
gtf_path <- "Outputs/EvolutionNanopore/Annotation/FunannotateDef/Scer/Scer_rescued.agat.gtf"
#txdb <- loadTxdb(gtf_path)
# 3. fasta genome location
genome_path <- "Inputs/Genomes/Scer_genome.fna"
#genome <- readDNAStringSet(genome_path)
#names(genome) <- gsub(pattern = " .*", replacement = "",x = names(genome))
# 4. Pick an experiment name
exper.name <- "ORFik_yeast"
# Template
template <- create.experiment(dir = NGS.dir,  # directory of the NGS files for the experiment
exper.name,     # Experiment name
txdb = gtf_path,    # gtf / gff / gff.db annotation
fa = genome_path,     # Fasta genome
organism = "Saccharomyces cerevisiae", # Scientific naming
saveDir = NULL, # Create template instead of ready experiment
)
# The experiment contains 3 main parts:
# 1. Annotation, organism, general info:
data.frame(template)[1:3, ]
data.frame(template)
# The experiment contains 3 main parts:
# 1. Annotation, organism, general info:
df <- read.experiment(template)# read experiment from template
template$X5[5:nrow(template)] <- seq(1,nrow(template)-4)
# The experiment contains 3 main parts:
# 1. Annotation, organism, general info:
df <- read.experiment(template)# read experiment from template
df
save.experiment(df, file = "Test.csv")
envExp(df) #This will be the environment
bamVarName(df) #This will be the names:
df
template
outputLibs(df) # With default output.mode = "envir".
shiftFootprintsByExperiment(df[df$libtype == "RFP",])
# 1. Pick directory (normally a folder with your aligned bam files)
NGS.dir <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/ribosomeProfiling/AdditionalDatasets/BAMs/"
# 2. .gff/.gtf location
gtf_path <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/Annotation/FunannotateDef/Scer/Scer_rescued.agat.gtf"
#txdb <- loadTxdb(gtf_path)
# 3. fasta genome location
genome_path <- "/home/jmontanes/Documents/EvolutionNanopore/Inputs/Genomes/Scer_genome.fna"
#genome <- readDNAStringSet(genome_path)
#names(genome) <- gsub(pattern = " .*", replacement = "",x = names(genome))
# 4. Pick an experiment name
exper.name <- "ORFik_yeast"
# Template
template <- create.experiment(dir = NGS.dir,  # directory of the NGS files for the experiment
exper.name,     # Experiment name
txdb = gtf_path,    # gtf / gff / gff.db annotation
fa = genome_path,     # Fasta genome
organism = "Saccharomyces cerevisiae", # Scientific naming
saveDir = NULL, # Create template instead of ready experiment
)
template$X5[5:nrow(template)] <- seq(1,nrow(template)-4)
# The experiment contains 3 main parts:
# 1. Annotation, organism, general info:
df <- read.experiment(template)# read experiment from template
save.experiment(df, file = "Test.csv")
envExp(df) #This will be the environment
bamVarName(df) #This will be the names:
outputLibs(df) # With default output.mode = "envir".
shiftFootprintsByExperiment(df[df$libtype == "RFP",])
shiftPlots(df[df$libtype == "RFP",], type = "heatmap")
bam_files <- list.files(bam_dir)
bam_dir <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/ribosomeProfiling/AdditionalDatasets/BAMs/"
bam_files <- list.files(bam_dir)
bam_files
bam_files <- list.files(bam_dir, pattern = ".bam$")
bam_files
bam_files <- list.files(bam_dir, pattern = ".bam$", full.names = TRUE)
bam_files
gsub(pattern = "/.*", replacement = "", x = bam_files[1])
gsub(pattern = ".*/", replacement = "", x = bam_files[1])
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file)
footprints_ori <- readBam(file)
footprints <- footprints_ori
# Check read length
table(readWidths(footprints, after.softclips = FALSE))
# Modify the read information to get only the first nucleotide
footprintsGR <- convertToOneBasedRanges(footprints, addSizeColumn = TRUE,after.softclips = F)
##################### Remove things without UTR
tx_to_use <- filterTranscripts(txdb)
cds_noUTR <- cds[tx_to_use] # etc
hitMap <- windowPerReadLength(grl = cds_noUTR, tx = tx, reads = footprintsGR, pShifted = FALSE)
coverageHeatMap(hitMap, scoring = "transcriptNormalized",title = fileId)
}
library(BiocManager)
library(dplyr)
library(ggplot2)
library(rtracklayer)
library(GenomicFeatures)              # For basic transcript operations
library(ORFik)
library(data.table)
library(BSgenome)
library(ribosomeProfilingQC)
library(Rsamtools)
library(seqLogo)
source("/home/jmontanes/Documents/EvolutionNanopore/Inputs/Scripts/Modified_Orfik.R")
gff <- "Outputs/EvolutionNanopore/Annotation/FunannotateDef/Scer/Scer_rescued.agat.gtf"
txdb <- loadTxdb(gff)
gff <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/Annotation/FunannotateDef/Scer/Scer_rescued.agat.gtf"
txdb <- loadTxdb(gff)
gtfCols <- c("seqnames", "software", "feature", "start","end","info1","strand","info2","attribute")
GR_gff <- read.delim(gff, col.names = gtfCols, comment.char = "#") %>% GRanges()
genome <- readDNAStringSet("Inputs/Genomes/Scer_genome.fna")
gff <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/Annotation/FunannotateDef/Scer/Scer_rescued.agat.gtf"
txdb <- loadTxdb(gff)
gtfCols <- c("seqnames", "software", "feature", "start","end","info1","strand","info2","attribute")
GR_gff <- read.delim(gff, col.names = gtfCols, comment.char = "#") %>% GRanges()
genome <- readDNAStringSet("/home/jmontanes/Documents/EvolutionNanopore/Inputs/Genomes/Scer_genome.fna")
names(genome) <- gsub(pattern = " .*", replacement = "",x = names(genome))
bam_dir <- "/home/jmontanes/Documents/EvolutionNanopore/Outputs/EvolutionNanopore/ribosomeProfiling/AdditionalDatasets/BAMs/"
bam_files <- list.files(bam_dir, pattern = ".bam$", full.names = TRUE)
tx <- loadRegion(txdb, part = "tx")
cds <- loadRegion(txdb, part = "cds")
leaders <- loadRegion(txdb, part = "leader")
trailers <- loadRegion(txdb, part = "trailers")
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file)
footprints_ori <- readBam(file)
footprints <- footprints_ori
# Check read length
table(readWidths(footprints, after.softclips = FALSE))
# Modify the read information to get only the first nucleotide
footprintsGR <- convertToOneBasedRanges(footprints, addSizeColumn = TRUE,after.softclips = F)
##################### Remove things without UTR
tx_to_use <- filterTranscripts(txdb)
cds_noUTR <- cds[tx_to_use] # etc
hitMap <- windowPerReadLength(grl = cds_noUTR, tx = tx, reads = footprintsGR, pShifted = FALSE)
coverageHeatMap(hitMap, scoring = "transcriptNormalized",title = fileId)
}
coverageHeatMap(hitMap, scoring = "transcriptNormalized",title = fileId)
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file)
footprints_ori <- readBam(file)
footprints <- footprints_ori
# Modify the read information to get only the first nucleotide
footprintsGR <- convertToOneBasedRanges(footprints, addSizeColumn = TRUE,after.softclips = F)
##################### Remove things without UTR
tx_to_use <- filterTranscripts(txdb)
cds_noUTR <- cds[tx_to_use] # etc
hitMap <- windowPerReadLength(grl = cds_noUTR, tx = tx, reads = footprintsGR, pShifted = FALSE)
print(coverageHeatMap(hitMap, scoring = "transcriptNormalized",title = fileId))
}
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file)
footprints_ori <- readBam(file)
footprints <- footprints_ori
shifts <- detectRibosomeShifts(footprints, txdb, tx = extendLeaders(tx, 30), verbose = T )
footprintsShifted <- shiftFootprints(footprints = footprints, shifts = shifts)
print(footprintsShifted)
}
footprintsShifted
shift()
shifts
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file) %>% gsub(pattern = ".bam", replacement = "")
footprints_ori <- readBam(file)
footprints <- footprints_ori
shifts <- detectRibosomeShifts(footprints, txdb, tx = extendLeaders(tx, 30), verbose = T )
write.table(x = shifts, file = paste0("Offset.",fileID))
}
shifts
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file) %>% gsub(pattern = ".bam", replacement = "")
footprints_ori <- readBam(file)
footprints <- footprints_ori
shifts <- detectRibosomeShifts(footprints, txdb, tx = extendLeaders(tx, 30), verbose = T )
write.table(x = shifts, file = paste0("Offset.",fileID))
}
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file) %>% gsub(pattern = ".bam", replacement = "")
footprints_ori <- readBam(file)
footprints <- footprints_ori
shifts <- detectRibosomeShifts(footprints, txdb, tx = extendLeaders(tx, 30), verbose = T )
write.table(x = shifts, file = paste0("Offset.",fileId,".txt"), sep = "\t")
}
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file) %>% gsub(pattern = ".bam", replacement = "")
footprints_ori <- readBam(file)
footprints <- footprints_ori
shifts <- detectRibosomeShifts(footprints, txdb, tx = extendLeaders(tx, 30), verbose = F )
write.table(x = shifts, file = paste0("Offset.",fileId,".txt"), sep = "\t")
}
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file) %>% gsub(pattern = ".bam", replacement = "")
footprints_ori <- readBam(file)
footprints <- footprints_ori
shifts <- detectRibosomeShifts(footprints, txdb, tx = extendLeaders(tx, 30), verbose = F )
write.table(x = shifts, file = paste0("Offset.",fileId,".txt"), sep = "\t", quote = F)
}
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file) %>% gsub(pattern = ".bam", replacement = "")
footprints_ori <- readBam(file)
footprints <- footprints_ori
shifts <- detectRibosomeShifts(footprints, txdb, tx = extendLeaders(tx, 30), verbose = F )
write.table(x = shifts, file = paste0("Offset.",fileId,".txt"), sep = "\t", quote = F, row.names = F)
}
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file)
footprints_ori <- readBam(file)
footprints <- footprints_ori
# Modify the read information to get only the first nucleotide
footprintsGR <- convertToOneBasedRanges(footprints, addSizeColumn = TRUE,after.softclips = F)
windows <- startRegion(cds, tx, TRUE, upstream = 0, downstream = 10)
lengths <- widthPerGroup(windows, FALSE)
# Create a new windows increased in 20 nucleotides from the translation starting site
new_windows <- extend_needed(windows, lengths, 30, direction = "up")
# Validate all windows are now equal size
new_lengths <- widthPerGroup(new_windows, FALSE)
# All windows must be same size!
stopifnot(length(unique(new_lengths)) == 1)
# To run correctly the following script all the windows have to have the same size
# If they do not have it remove those
hitMap <- windowPerReadLength(grl = cds, tx = tx, reads = footprintsGR, pShifted = FALSE, windows = new_windows)
png(filename = fileId)
coverageHeatMap(hitMap, scoring = "transcriptNormalized")
dev.off()
}
for(file in bam_files){
fileId <- gsub(pattern = ".*/", replacement = "", x = file)
footprints_ori <- readBam(file)
footprints <- footprints_ori
# Modify the read information to get only the first nucleotide
footprintsGR <- convertToOneBasedRanges(footprints, addSizeColumn = TRUE,after.softclips = F)
windows <- startRegion(cds, tx, TRUE, upstream = 0, downstream = 10)
lengths <- widthPerGroup(windows, FALSE)
# Create a new windows increased in 20 nucleotides from the translation starting site
new_windows <- extend_needed(windows, lengths, 30, direction = "up")
# Validate all windows are now equal size
new_lengths <- widthPerGroup(new_windows, FALSE)
# All windows must be same size!
stopifnot(length(unique(new_lengths)) == 1)
# To run correctly the following script all the windows have to have the same size
# If they do not have it remove those
hitMap <- windowPerReadLength(grl = cds, tx = tx, reads = footprintsGR, pShifted = FALSE, windows = new_windows)
coverageHeatMap(hitMap, scoring = "transcriptNormalized",output = paste(fileId,".png"))
}
?detectRibosomeShifts
